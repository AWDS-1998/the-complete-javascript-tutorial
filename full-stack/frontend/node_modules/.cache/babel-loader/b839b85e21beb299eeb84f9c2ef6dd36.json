{"ast":null,"code":"var _jsxFileName = \"/home/nawras/js-tutorial/material/blog/src/pages/SinglePost.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Sidebar from \"../components/Sidebar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: \"90%\"\n  },\n  rootnotsm: {\n    margin: \"1rem auto\"\n  },\n  rootsm: {\n    margin: \"3rem auto\",\n    maxWidth: \"100%\"\n  },\n  main: {\n    padding: \"1rem\"\n  },\n  sidebar: {\n    padding: \"1rem\"\n  }\n});\n\nconst SinglePost = props => {\n  _s();\n\n  const classes = useStyles(props);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const URL = \"https://jsonplaceholder.typicode.com/posts\";\n\n    const fetchPosts = async () => {\n      const response = await fetch(URL);\n      const posts = await response.json();\n      setPosts(posts);\n    };\n\n    fetchPosts();\n  }, []);\n  console.log(posts);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: matches ? \"column\" : \"row\",\n      className: matches ? `${classes.root} ${classes.rootsm}` : `${classes.root} ${classes.rootnotsm}`,\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        columnSpacing: 1,\n        xs: 7,\n        className: classes.main,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          gutterBottom: true,\n          children: \"Post title goes here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          gutterBottom: true,\n          children: \"Sit iure repellendus a a dicta? At possimus incidunt perferendis est nobis nam Sapiente incidunt eum quas rem laudantium Nam error sit atque molestias nesciunt at, sed? Quae esse dolores?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.sidebar,\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SinglePost, \"LZCjetL7Aoi5I00YQHSnCk4eM3k=\", false, function () {\n  return [useStyles, useTheme, useMediaQuery];\n});\n\n_c = SinglePost;\nexport default SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["/home/nawras/js-tutorial/material/blog/src/pages/SinglePost.jsx"],"names":["useState","useEffect","Grid","Typography","makeStyles","useMediaQuery","useTheme","Sidebar","useStyles","root","maxWidth","rootnotsm","margin","rootsm","main","padding","sidebar","SinglePost","props","classes","theme","matches","breakpoints","down","posts","setPosts","URL","fetchPosts","response","fetch","json","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Sidebar from \"../components/Sidebar\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: \"90%\",\n  },\n\n  rootnotsm: {\n    margin: \"1rem auto\",\n  },\n\n  rootsm: {\n    margin: \"3rem auto\",\n    maxWidth: \"100%\",\n  },\n\n  main: {\n    padding: \"1rem\",\n  },\n\n  sidebar: {\n    padding: \"1rem\",\n  },\n});\n\nconst SinglePost = (props) => {\n  const classes = useStyles(props);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const URL = \"https://jsonplaceholder.typicode.com/posts\";\n    const fetchPosts = async () => {\n      const response = await fetch(URL);\n      const posts = await response.json();\n      setPosts(posts);\n    };\n    fetchPosts();\n  }, []);\n  console.log(posts);\n  return (\n    <>\n      <Grid\n        container\n        direction={matches ? \"column\" : \"row\"}\n        className={\n          matches\n            ? `${classes.root} ${classes.rootsm}`\n            : `${classes.root} ${classes.rootnotsm}`\n        }\n        justifyContent=\"space-between\"\n      >\n        <Grid item columnSpacing={1} xs={7} className={classes.main}>\n          <Typography component=\"h1\" variant=\"h5\" gutterBottom>\n            Post title goes here\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n\n            Sit iure repellendus a a dicta? At possimus incidunt perferendis est nobis nam Sapiente incidunt eum quas rem laudantium Nam error sit atque molestias nesciunt at, sed? Quae esse dolores?\n          </Typography>\n        </Grid>\n        <Grid item xs={4} className={classes.sidebar}>\n          <Sidebar />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SinglePost;\n"]},"metadata":{},"sourceType":"module"}