{"ast":null,"code":"var _jsxFileName = \"/home/nawras/js-tutorial/material/blog/src/pages/templates/SinglePost.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { makeStyles } from \"@mui/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Sidebar from \"../../parts/Sidebar\";\nimport Post from \"../../components/post/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: \"90%\"\n  },\n  rootnotsm: {\n    margin: \"1rem auto\"\n  },\n  rootsm: {\n    margin: \"3rem auto\",\n    maxWidth: \"100%\"\n  },\n  main: {\n    padding: \"1rem\"\n  },\n  sidebar: {\n    padding: \"1rem\"\n  }\n});\n\nconst SinglePost = props => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const classes = useStyles(props);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [post, setPost] = useState(undefined);\n  useEffect(() => {\n    const URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n\n    const fetchPost = async () => {\n      const response = await fetch(URL);\n      const post = await response.json();\n      setPost(post);\n    };\n\n    setTimeout(fetchPost, 100);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: matches ? \"column\" : \"row\",\n      className: matches ? `${classes.root} ${classes.rootsm}` : `${classes.root} ${classes.rootnotsm}`,\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        columnSpacing: 1,\n        xs: 7,\n        className: classes.main,\n        children: post ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Post, {\n            id: post.id,\n            title: post.title,\n            content: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"p\",\n            gutterBottom: true,\n            children: \"Post is loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.sidebar,\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SinglePost, \"qc4q4x12mb6sMmwlu1wpKmrhzGo=\", false, function () {\n  return [useParams, useStyles, useTheme, useMediaQuery];\n});\n\n_c = SinglePost;\nexport default SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["/home/nawras/js-tutorial/material/blog/src/pages/templates/SinglePost.jsx"],"names":["useState","useEffect","useParams","Grid","Typography","CircularProgress","makeStyles","useMediaQuery","useTheme","Sidebar","Post","useStyles","root","maxWidth","rootnotsm","margin","rootsm","main","padding","sidebar","SinglePost","props","id","classes","theme","matches","breakpoints","down","post","setPost","undefined","URL","fetchPost","response","fetch","json","setTimeout","title","body"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { makeStyles } from \"@mui/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Sidebar from \"../../parts/Sidebar\";\nimport Post from \"../../components/post/Post\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: \"90%\",\n  },\n\n  rootnotsm: {\n    margin: \"1rem auto\",\n  },\n\n  rootsm: {\n    margin: \"3rem auto\",\n    maxWidth: \"100%\",\n  },\n\n  main: {\n    padding: \"1rem\",\n  },\n\n  sidebar: {\n    padding: \"1rem\",\n  },\n});\n\nconst SinglePost = (props) => {\n  const { id } = useParams();\n  const classes = useStyles(props);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [post, setPost] = useState(undefined);\n\n  useEffect(() => {\n    const URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n    const fetchPost = async () => {\n      const response = await fetch(URL);\n      const post = await response.json();\n      setPost(post);\n    };\n    setTimeout(fetchPost, 100);\n  }, []);\n  return (\n    <>\n      <Grid\n        container\n        direction={matches ? \"column\" : \"row\"}\n        className={\n          matches\n            ? `${classes.root} ${classes.rootsm}`\n            : `${classes.root} ${classes.rootnotsm}`\n        }\n        justifyContent=\"space-between\"\n      >\n        <Grid item columnSpacing={1} xs={7} className={classes.main}>\n          {post ? (\n            <>\n              <Post id={post.id} title={post.title} content={post.body} />\n            </>\n          ) : (\n            <>\n              <Typography variant=\"h5\" component=\"p\" gutterBottom>\n                Post is loading\n              </Typography>\n              <CircularProgress size={100} />\n            </>\n          )}\n        </Grid>\n        <Grid item xs={4} className={classes.sidebar}>\n          <Sidebar />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SinglePost;\n"]},"metadata":{},"sourceType":"module"}